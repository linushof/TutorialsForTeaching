#Cumulative prospect theory hierarchical implementation

# This model implements Cumulative prospect theory in the following functional forms:
# Value function: 	Tversky & Kahnemann (1992) -> Two-parametric version estimating alpha and lambda parameters.
# Weighting function: 	Tversky & Kahnemann (1992) -> One-parametric version, estimating a global estimate across gain and loss domains.
# Choice rule: 		Logit Choice rule
# For a comparison to other functional forms, see Stott (2006)


model {
  for (j in 1:nSubj) {  #Subject-loop

  #### PRIORS FOR INDIVIDUAL LEVEL
    #Value function 
    alpha.phi[j] ~ dnorm(mu.phi.alpha, tau.phi.alpha)T(-5,5)
    alpha.pre[j] <- phi(alpha.phi[j])
    alpha[j] <- alpha.pre[j]*2

    #Probability weighting function
    gamma.phi[j] ~ dnorm(mu.phi.gamma, tau.phi.gamma)T(-5,5)
    gamma.pre[j] <- phi(gamma.phi[j])
    gamma[j] <- gamma.pre[j]*2

    
    #Loss aversion
    lambda.phi[j] ~ dnorm(mu.phi.lambda, tau.phi.lambda)T(-5,5)
    lambda.pre[j] <- phi(lambda.phi[j])
    lambda[j] <- lambda.pre[j]*5

    #Choice rule
    theta.phi[j] ~ dnorm(mu.phi.theta, tau.phi.theta)T(-5,5) 
    theta[j] <- phi(theta.phi[j])*10 # 5 # 5 is original

  }

    gamma.gain <- gamma
    gamma.loss <- gamma


  ####PRIORS FOR GROUP LEVEL
  
  #Value function
  mu.phi.alpha ~ dnorm(0,1)T(-5,5)
  sigma.phi.alpha ~ dunif(0,10)
  tau.phi.alpha <- pow(sigma.phi.alpha,-2)
  
  #Loss aversion
  mu.phi.lambda ~ dnorm(0,1)T(-5,5)
  sigma.phi.lambda ~ dunif(0,10) 
  tau.phi.lambda <- pow(sigma.phi.lambda,-2)
  
  #Probability weighting function
  mu.phi.gamma ~ dnorm(0,1)T(-5,5)
  sigma.phi.gamma ~ dunif(0,10)
  tau.phi.gamma <- pow(sigma.phi.gamma,-2)
  
  #Choice rule
  mu.phi.theta ~ dnorm(0,1)T(-5,5) 
  sigma.phi.theta ~ dunif(0,10)
  tau.phi.theta <- pow(sigma.phi.theta,-2)
  
  # To obtain the mean of the hyperdistribution on the desired scale
  mu.alpha    <- phi(mu.phi.alpha 		/ sqrt(1+ pow(sigma.phi.alpha, 2)))	*2
  mu.lambda   <- phi(mu.phi.lambda 		/ sqrt(1+ pow(sigma.phi.lambda,2)))	*5
  mu.gamma    <- phi(mu.phi.gamma  		/ sqrt(1+ pow(sigma.phi.gamma, 2)))	*2 
  mu.theta    <- phi(mu.phi.theta  		/ sqrt(1+ pow(sigma.phi.theta, 2)))	*5




  for (j in 1:nSubj) {  #Subject-loop
    #-------------------------
    #POSITIVE LOTTERY
    for (i in 1:nGain[j]) {  #Item loop

    
      #Value function
      #Lottery A
      v.x.a[i,j] <- pow(prospectsA[i,1,j],alpha[j])
      v.y.a[i,j] <- pow(prospectsA[i,3,j],alpha[j])
      v.z.a[i,j] <- pow(prospectsA[i,5,j],alpha[j])
      #Lottery B
      v.x.b[i,j] <- pow(prospectsB[i,1,j],alpha[j])       
      v.y.b[i,j] <- pow(prospectsB[i,3,j],alpha[j])
      v.z.b[i,j] <- pow(prospectsB[i,5,j],alpha[j])
      
      #Probability weighting function
      #Lottery A
      w.x.a[i,j] <- pow(cumprobsA[i,1,j],gamma[j]) / pow(pow(cumprobsA[i,1,j],gamma[j]) + pow((1-cumprobsA[i,1,j]),gamma[j]),(1/gamma[j])) 
      w.y.a[i,j] <- pow(cumprobsA[i,2,j],gamma[j])/  pow(pow(cumprobsA[i,2,j],gamma[j]) + pow((1-cumprobsA[i,2,j]),gamma[j]),(1/gamma[j])) - w.x.a[i,j]
      w.z.a[i,j] <- pow(cumprobsA[i,3,j],gamma[j])/  pow(pow(cumprobsA[i,3,j],gamma[j]) + pow((1-cumprobsA[i,3,j]),gamma[j]),(1/gamma[j])) - (w.y.a[i,j] + w.x.a[i,j])

      #Lottery B
      w.x.b[i,j] <- pow(cumprobsB[i,1,j],gamma[j]) / pow(pow(cumprobsB[i,1,j],gamma[j]) + pow((1-cumprobsB[i,1,j]),gamma[j]),(1/gamma[j])) 
      w.y.b[i,j] <- pow(cumprobsB[i,2,j],gamma[j])/  pow(pow(cumprobsB[i,2,j],gamma[j]) + pow((1-cumprobsB[i,2,j]),gamma[j]),(1/gamma[j])) - w.x.b[i,j]
      w.z.b[i,j] <- pow(cumprobsB[i,3,j],gamma[j])/  pow(pow(cumprobsB[i,3,j],gamma[j]) + pow((1-cumprobsB[i,3,j]),gamma[j]),(1/gamma[j])) - (w.y.b[i,j] + w.x.b[i,j])

      #Valuation 	
      Vf.a[i,j]  <- w.x.a[i,j] * v.x.a[i,j] + w.y.a[i,j] * v.y.a[i,j] + w.z.a[i,j] * v.z.a[i,j]
      Vf.b[i,j]  <- w.x.b[i,j] * v.x.b[i,j] + w.y.b[i,j] * v.y.b[i,j] + w.z.b[i,j] * v.z.b[i,j]
      
	
      #Choice rule
      binval[i,j] <- (1)/(1+exp((-1*theta[j])*(Vf.a[i,j]-Vf.b[i,j])))
      choices[i,j] ~ dbern(binval[i,j])
      choices.pred[i,j] ~ dbern(binval[i,j])
    }

		
    #-------------------------
    #NEGATIVE LOTTERY
    for (i in (nGain[j]+1):(nGain[j]+nLoss[j])) { # Item-Loop

      #Value function
      #Lottery A
      v.x.a[i,j] <- lambda[j]*(-1) * pow((abs(prospectsA[i,1,j])),alpha[j])       
      v.y.a[i,j] <- lambda[j]*(-1) * pow((abs(prospectsA[i,3,j])),alpha[j])
      v.z.a[i,j] <- lambda[j]*(-1) * pow((abs(prospectsA[i,5,j])),alpha[j])

      #Lottery B	
      v.x.b[i,j] <- lambda[j]*(-1) * pow((abs(prospectsB[i,1,j])),alpha[j])       
      v.y.b[i,j] <- lambda[j]*(-1) * pow((abs(prospectsB[i,3,j])),alpha[j]) 
      v.z.b[i,j] <- lambda[j]*(-1) * pow((abs(prospectsB[i,5,j])),alpha[j]) 


      #Probability weighting function
      #Lottery A
      w.x.a[i,j] <- pow(cumprobsA[i,3,j],gamma[j]) / pow(pow(cumprobsA[i,3,j],gamma[j]) + pow((1-cumprobsA[i,3,j]),gamma[j]),(1/gamma[j])) - pow(cumprobsA[i,4,j],gamma[j])/ pow(pow(cumprobsA[i,4,j],gamma[j]) + pow((1-cumprobsA[i,4,j]),gamma[j]),(1/gamma[j]))
      w.y.a[i,j] <- pow(cumprobsA[i,4,j],gamma[j]) / pow(pow(cumprobsA[i,4,j],gamma[j]) + pow((1-cumprobsA[i,4,j]),gamma[j]),(1/gamma[j])) - pow(cumprobsA[i,5,j],gamma[j])/ pow(pow(cumprobsA[i,5,j],gamma[j]) + pow((1-cumprobsA[i,5,j]),gamma[j]),(1/gamma[j]))
      w.z.a[i,j] <- pow(cumprobsA[i,5,j],gamma[j]) / pow(pow(cumprobsA[i,5,j],gamma[j]) + pow((1-cumprobsA[i,5,j]),gamma[j]),(1/gamma[j]))       

      #Lottery B
      w.x.b[i,j] <- pow(cumprobsB[i,3,j],gamma[j]) / pow(pow(cumprobsB[i,3,j],gamma[j]) + pow((1-cumprobsB[i,3,j]),gamma[j]),(1/gamma[j])) - pow(cumprobsB[i,4,j],gamma[j])/ pow(pow(cumprobsB[i,4,j],gamma[j]) + pow((1-cumprobsB[i,4,j]),gamma[j]),(1/gamma[j]))
      w.y.b[i,j] <- pow(cumprobsB[i,4,j],gamma[j]) / pow(pow(cumprobsB[i,4,j],gamma[j]) + pow((1-cumprobsB[i,4,j]),gamma[j]),(1/gamma[j])) - pow(cumprobsB[i,5,j],gamma[j])/ pow(pow(cumprobsB[i,5,j],gamma[j]) + pow((1-cumprobsB[i,5,j]),gamma[j]),(1/gamma[j]))
      w.z.b[i,j] <- pow(cumprobsB[i,5,j],gamma[j]) / pow(pow(cumprobsB[i,5,j],gamma[j]) + pow((1-cumprobsB[i,5,j]),gamma[j]),(1/gamma[j])) 

      #Valuation 	
      Vf.a[i,j]  <- w.x.a[i,j] * v.x.a[i,j] + w.y.a[i,j] * v.y.a[i,j] + w.z.a[i,j] * v.z.a[i,j]
      Vf.b[i,j]  <- w.x.b[i,j] * v.x.b[i,j] + w.y.b[i,j] * v.y.b[i,j] + w.z.b[i,j] * v.z.b[i,j]
   	
      #Choice rule
      binval[i,j] <- (1)/(1+exp((-1*theta[j])*(Vf.a[i,j]-Vf.b[i,j])))
      choices[i,j] ~ dbern(binval[i,j])
      choices.pred[i,j] ~ dbern(binval[i,j])
   }

   #-------------------------
    #MIXED LoTTERY Item-Loop
    for (i in (nGain[j]+nLoss[j]+1):(nGain[j]+nLoss[j]+nMixed[j])) { #Item loop


      #Value function
      #Lottery A
      v.x.a[i,j] <- pow(prospectsA[i,1,j],alpha[j])
      v.y.a[i,j] <- pow(prospectsA[i,3,j],alpha[j])
      v.z.a[i,j] <- (-1 * lambda[j]) * pow((abs(prospectsA[i,5,j])),alpha[j])   
    
      #Lottery B
      v.x.b[i,j] <- pow(prospectsB[i,1,j],alpha[j])  
      v.y.b[i,j] <- pow(prospectsB[i,3,j],alpha[j])          
      v.z.b[i,j] <- (-1 * lambda[j]) * pow((abs(prospectsB[i,5,j])),alpha[j])  

      #Weighting function
      #Lottery A
      w.x.a[i,j]  <- pow(cumprobsA[i,1,j],gamma[j]) / pow(pow(cumprobsA[i,1,j],gamma[j]) + pow((1-cumprobsA[i,1,j]),gamma[j]) ,(1/gamma[j])) 
      w.y.a[i,j]  <- pow(cumprobsA[i,2,j],gamma[j]) / pow(pow(cumprobsA[i,2,j],gamma[j]) + pow((1-cumprobsA[i,2,j]),gamma[j]) ,(1/gamma[j])) - w.x.a[i,j]
      w.z.a[i,j]  <- pow(cumprobsA[i,5,j],gamma[j]) / pow(pow(cumprobsA[i,5,j],gamma[j]) + pow((1-cumprobsA[i,5,j]),gamma[j]) ,(1/gamma[j]))

      #Lottery B
      w.x.b[i,j]  <- pow(cumprobsB[i,1,j],gamma[j]) / pow(pow(cumprobsB[i,1,j],gamma[j]) + pow((1-cumprobsB[i,1,j]),gamma[j]) ,(1/gamma[j])) 
      w.y.b[i,j]  <- pow(cumprobsB[i,2,j],gamma[j]) / pow(pow(cumprobsB[i,2,j],gamma[j]) + pow((1-cumprobsB[i,2,j]),gamma[j]) ,(1/gamma[j])) - w.x.b[i,j]
      w.z.b[i,j]  <- pow(cumprobsB[i,5,j],gamma[j]) / pow(pow(cumprobsB[i,5,j],gamma[j]) + pow((1-cumprobsB[i,5,j]),gamma[j]) ,(1/gamma[j]))
      
      #Valuation 	
      Vf.a[i,j]  <- w.x.a[i,j] * v.x.a[i,j] + w.y.a[i,j] * v.y.a[i,j] + w.z.a[i,j] * v.z.a[i,j]
      Vf.b[i,j]  <- w.x.b[i,j] * v.x.b[i,j] + w.y.b[i,j] * v.y.b[i,j] + w.z.b[i,j] * v.z.b[i,j]
      	
      #Choice rule     
      binval[i,j] <- (1)/(1+exp((-1*theta[j])*(Vf.a[i,j]-Vf.b[i,j])))
      choices[i,j] ~ dbern(binval[i,j])
      choices.pred[i,j] ~ dbern(binval[i,j])
    }
  }   
}